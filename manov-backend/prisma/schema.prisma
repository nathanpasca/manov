// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Tables Structure

model Author {
  id                Int      @id @default(autoincrement())
  name              String // Original name
  nameRomanized     String? // For non-Latin scripts
  biography         String?  @db.Text
  birthDate         DateTime? @db.Date
  deathDate         DateTime? @db.Date
  nationality       String?
  originalLanguage  String // zh, ja, ko, etc.
  profileImageUrl   String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  isActive          Boolean  @default(true) // for soft deletes

  novels            Novel[]
}

model Novel {
  id                 Int      @id @default(autoincrement())
  title              String // Original title
  titleTranslated    String? // Default English translation
  slug               String   @unique // URL-friendly identifier
  authorId           Int
  synopsis           String?  @db.Text
  coverImageUrl      String?
  originalLanguage   String // Indicates the language of the source novel
  sourceUrl          String? // link to original
  publicationStatus  PublicationStatus @default(ONGOING)
  translationStatus  TranslationStatus @default(ACTIVE) // Status of the default/primary translation
  genreTags          String[] // Array of strings for genres
  totalChapters      Int?
  viewCount          Int      @default(0)
  favoriteCount      Int      @default(0)
  averageRating      Decimal? @db.Decimal(2, 1) // e.g., 4.5
  firstPublishedAt   DateTime? @db.Date
  lastUpdatedAt      DateTime? // Could be when the last chapter was added/updated
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  isActive           Boolean  @default(true)

  author             Author   @relation(fields: [authorId], references: [id], onDelete: Restrict)
  chapters           Chapter[]
  readingProgress    ReadingProgress[]
  userFavorites      UserFavorite[]
  ratings            Rating[]
  novelTranslations  NovelTranslation[]

  comments            Comment[]
}

model Chapter {
  id                  Int      @id @default(autoincrement())
  novelId             Int
  chapterNumber       Float    // Using Float to allow for chapters like 1.5 or extras as 0.1, 0.2 etc. Integer is also fine.
  title               String?  // This would be the title of the primary translated chapter
  content             String   @db.Text // This would be the content of the primary translated chapter (e.g., English)
  wordCount           Int?
  isPublished         Boolean  @default(false)
  publishedAt         DateTime?
  translatorNotes     String?  @db.Text
  originalChapterUrl  String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  readingTimeEstimate Int?     // in minutes

  novel               Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  readingProgress     ReadingProgress[] // If you want to track progress at chapter level for multiple users
  chapterTranslations ChapterTranslation[]

  @@unique([novelId, chapterNumber]) // Ensures chapter numbers are unique per novel

  comments            Comment[]
}

model Comment {
  id          String    @id @default(cuid())
  content     String    @db.Text
  userId      String
  novelId     Int?      // Comment can be directly on a novel
  chapterId   Int?      // Or on a specific chapter
  parentId    String?   // For threaded replies, refers to another Comment's id

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isEdited    Boolean   @default(false) // To indicate if a comment has been edited by the user/admin

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  novel       Novel?    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  chapter     Chapter?  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[] @relation("CommentReplies")

  // Application logic should ensure that a top-level comment (parentId is null)
  // has either novelId OR chapterId set, but not both.
  // Replies (parentId is not null) inherit their context from the parent.
}

model User {
  id                  String    @id @default(cuid())
  username            String    @unique
  email               String    @unique
  passwordHash        String
  displayName         String?
  avatarUrl           String?
  preferredLanguage   String    @default("en") // Default to English
  emailVerifiedAt     DateTime?
  lastLoginAt         DateTime?
  isAdmin             Boolean   @default(false)
  readingPreferences  Json?     // For font, theme, etc.
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  isActive            Boolean   @default(true)

  readingProgress     ReadingProgress[]
  userFavorites       UserFavorite[]
  ratings             Rating[]
  translatedNovels    NovelTranslation[]   @relation("NovelTranslator")
  translatedChapters  ChapterTranslation[] @relation("ChapterTranslator")
  
  comments            Comment[]
}

model ReadingProgress {
  id                  Int      @id @default(autoincrement())
  userId              String
  novelId             Int
  chapterId           Int      // Current or last read chapter
  progressPercentage  Int      // Overall novel progress 0-100, or chapter progress. You might need to clarify.
                               // Assuming overall novel progress for now based on user moving through chapters.
  lastReadAt          DateTime @default(now()) @updatedAt
  readingPosition     String?  // Could be a more complex marker like a CSS selector or character offset. String is flexible.
                               // If it's always a number, Int? is fine.
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt


  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  novel               Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  chapter             Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade) // The specific chapter they are on

  @@unique([userId, novelId]) // A user has one main progress point per novel
}

model UserFavorite {
  id                  Int      @id @default(autoincrement())
  userId              String
  novelId             Int
  addedAt             DateTime @default(now())
  notificationEnabled Boolean  @default(true)

  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  novel               Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)

  @@unique([userId, novelId])
}

model Rating {
  id          Int      @id @default(autoincrement())
  userId      String
  novelId     Int
  rating      Int      // 1-5
  reviewText  String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  novel       Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)

  @@unique([userId, novelId]) // One rating per user per novel
}

// Advanced Tables for Multi-language Support

model Language {
  id          Int      @id @default(autoincrement())
  code        String   @unique // 'en', 'id', 'zh', etc.
  name        String   // 'English', 'Indonesian', etc.
  nativeName  String   // 'English', 'Bahasa Indonesia', etc.
  isActive    Boolean  @default(true)

  novelTranslations   NovelTranslation[]
  chapterTranslations ChapterTranslation[]
}

model NovelTranslation {
  id            Int      @id @default(autoincrement())
  novelId       Int
  languageCode  String   // Foreign Key to Languages.code
  title         String
  synopsis      String?  @db.Text
  translatorId  String?  // Foreign Key to Users, nullable (e.g. for machine translations or unassigned)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  novel         Novel    @relation(fields: [novelId], references: [id], onDelete: Cascade)
  language      Language @relation(fields: [languageCode], references: [code], onDelete: Restrict)
  translator    User?    @relation("NovelTranslator", fields: [translatorId], references: [id], onDelete: SetNull)

  @@unique([novelId, languageCode])
}

model ChapterTranslation {
  id            Int      @id @default(autoincrement())
  chapterId     Int
  languageCode  String   // Foreign Key to Languages.code
  title         String?
  content       String   @db.Text
  translatorId  String?  // Foreign Key to Users, nullable
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  chapter       Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  language      Language @relation(fields: [languageCode], references: [code], onDelete: Restrict)
  translator    User?    @relation("ChapterTranslator", fields: [translatorId], references: [id], onDelete: SetNull)

  @@unique([chapterId, languageCode])
}

// Enums

enum PublicationStatus {
  ONGOING
  COMPLETED
  HIATUS
  DROPPED
}

enum TranslationStatus {
  ACTIVE
  PAUSED
  COMPLETED // Translation of the primary/default language is complete
  DROPPED
}
